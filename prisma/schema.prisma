// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  PATIENT
  STUDENT
  ADMIN
}

enum ConsultationStatus {
  REQUESTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  image         String?
  role          UserRole  @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  patientProfile PatientProfile?
  studentProfile StudentProfile?
  sentMessages  Message[] @relation("SenderMessages")
  consultationsAsPatient Consultation[] @relation("PatientConsultations")
  consultationsAsStudent Consultation[] @relation("StudentConsultations")
  uploadedDocuments Document[] @relation("UploaderDocuments")
  passwordResetTokens PasswordResetToken[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model PatientProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  dob       DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  university    String
  clinicalYear  Int
  isVerified    Boolean  @default(false)
  averageRating Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Consultation {
  id              String   @id @default(cuid())
  patientId       String
  patient         User     @relation("PatientConsultations", fields: [patientId], references: [id], onDelete: Cascade)
  studentId       String?
  student         User?    @relation("StudentConsultations", fields: [studentId], references: [id], onDelete: SetNull)
  status          ConsultationStatus @default(REQUESTED)
  topic           String
  patientQuestion String   @db.Text
  summary         String?  @db.Text
  categories      String[] @default([]) // New field to store AI categories
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  messages        Message[]
  documents       Document[]

  // <<< ADD Feedback Fields >>>
  patientRating   Int?     // e.g., 1-5
  patientFeedback String?  @db.Text
  // feedbackToken String? @unique // Simplified V1 - Token removed for now
  // feedbackTokenExpires DateTime? // Simplified V1 - Token removed for now

  @@index([patientId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
}

model Message {
  id             String   @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content        String   @db.Text
  createdAt      DateTime @default(now())
  @@index([consultationId, createdAt])
  @@index([senderId])
}

model Document {
  id             String   @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  uploaderId     String
  uploader       User     @relation("UploaderDocuments", fields: [uploaderId], references: [id], onDelete: Cascade)
  fileName       String
  storageUrl     String   @db.Text
  mimeType       String
  fileSize       Int?
  createdAt      DateTime @default(now())
  @@index([consultationId])
  @@index([uploaderId])
}

// <<< ADD PasswordResetToken Model >>>
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique // Store a hash of the token
  expiresAt DateTime

  createdAt DateTime @default(now())

  @@index([userId])
}