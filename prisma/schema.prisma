// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Needed for migrations
}

// --- Enums ---
enum UserRole {
  PATIENT
  STUDENT
  ADMIN
}

enum ConsultationStatus {
  REQUESTED
  ASSIGNED // Potentially used internally or for future features
  IN_PROGRESS
  COMPLETED
  CANCELLED // Can be used if a consultation is explicitly cancelled
}

// --- Models ---
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?   // Nullable if using OAuth providers without password
  image         String?   // URL for profile picture
  role          UserRole  @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  patientProfile         PatientProfile?
  studentProfile         StudentProfile?
  sentMessages           Message[]          @relation("SenderMessages")
  consultationsAsPatient Consultation[]     @relation("PatientConsultations")
  consultationsAsStudent Consultation[]     @relation("StudentConsultations")
  uploadedDocuments      Document[]         @relation("UploaderDocuments")
  passwordResetTokens    PasswordResetToken[]
  accounts               Account[]          // For NextAuth OAuth
  sessions               Session[]          // For NextAuth database sessions (if used)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PatientProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  dob       DateTime? // Date of Birth
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  university    String
  clinicalYear  Int      // e.g., 3 for 3rd clinical year
  isVerified    Boolean  @default(false)
  averageRating Float?   // Optional: Could be calculated later
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Consultation {
  id              String    @id @default(cuid())
  patientId       String
  patient         User      @relation("PatientConsultations", fields: [patientId], references: [id], onDelete: Cascade)
  studentId       String?
  student         User?     @relation("StudentConsultations", fields: [studentId], references: [id], onDelete: SetNull) // SetNull on student deletion
  status          ConsultationStatus @default(REQUESTED)
  topic           String
  patientQuestion String    @db.Text
  summary         String?   @db.Text // Summary written by the student
  categories      String[]  @default([]) // AI assigned categories
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  messages  Message[]
  documents Document[]

  // --- Feedback Fields ---
  patientRating       Int?     // Overall satisfaction (1-5), presence indicates feedback given & unlocks summary
  patientFeedback     String?  @db.Text // Optional free text comment
  clarityRating       Int?     // Clarity of explanation (1-5)
  helpfulnessRating   Int?     // Helpfulness in addressing question (1-5)
  communicationRating Int?     // Student's communication style (1-5)

  // Indexes for common queries
  @@index([patientId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
}

model Message {
  id             String   @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content        String   @db.Text
  createdAt      DateTime @default(now())

  @@index([consultationId, createdAt]) // Index for ordering messages within a consultation
  @@index([senderId])
}

model Document {
  id             String   @id @default(cuid())
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  uploaderId     String
  uploader       User     @relation("UploaderDocuments", fields: [uploaderId], references: [id], onDelete: Cascade)
  fileName       String
  storageUrl     String   @db.Text // URL from Vercel Blob
  mimeType       String   // e.g., 'application/pdf', 'image/jpeg'
  fileSize       Int?     // Size in bytes
  createdAt      DateTime @default(now())

  @@index([consultationId])
  @@index([uploaderId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique // Store a hash of the token
  expiresAt DateTime // When the token expires
  createdAt DateTime @default(now())

  @@index([userId])
}

model DeletionFeedback {
  id        String   @id @default(cuid())
  userId    String?  // User ID *before* deletion, allows tracing if needed
  userEmail String   // Store email as user record will be gone
  feedback  String?  @db.Text // The optional feedback text
  deletedAt DateTime @default(now()) // Timestamp when feedback was recorded/deletion occurred

  @@index([userEmail])
  @@index([deletedAt])
}