// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Make sure this is set in your .env for migrations
}

// --- Enums ---

enum UserRole {
  PATIENT
  STUDENT
  ADMIN
}

enum ConsultationStatus {
  REQUESTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


// --- Models ---

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  image         String?
  role          UserRole  @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profiles
  patientProfile PatientProfile?
  studentProfile StudentProfile?

  // Relations
  sentMessages         Message[]            @relation("SenderMessages")
  consultationsAsPatient Consultation[]       @relation("PatientConsultations")
  consultationsAsStudent Consultation[]       @relation("StudentConsultations")
  uploadedDocuments    Document[]           @relation("UploaderDocuments")
  passwordResetTokens  PasswordResetToken[]
  accounts             Account[]
  sessions             Session[]
  deletionFeedbacks    DeletionFeedback[] // Relation to feedback (optional)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PatientProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String
  lastName  String
  dob       DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String
  lastName      String
  university    String
  clinicalYear  Int
  isVerified    Boolean  @default(false)
  averageRating Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Consultation {
  id              String    @id @default(cuid())
  patientId       String
  studentId       String?
  status          ConsultationStatus @default(REQUESTED)
  topic           String
  patientQuestion String    @db.Text
  summary         String?   @db.Text
  categories      String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Feedback Fields
  patientRating       Int?     // Overall satisfaction (1-5), presence indicates feedback given
  patientFeedback     String?  @db.Text // Optional free text comment
  clarityRating       Int?     // Clarity of explanation (1-5)
  helpfulnessRating   Int?     // Helpfulness in addressing question (1-5)
  communicationRating Int?     // Student's communication style (1-5)

  // Relations
  patient   User      @relation("PatientConsultations", fields: [patientId], references: [id], onDelete: Cascade)
  student   User?     @relation("StudentConsultations", fields: [studentId], references: [id], onDelete: SetNull) // Keep student consultations if student deletes account
  messages  Message[]
  documents Document[] @relation("ConsultationDocuments") // Relation for all docs in consultation

  @@index([patientId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
}

model Message {
  id             String    @id @default(cuid())
  consultationId String
  senderId       String
  content        String    @db.Text
  createdAt      DateTime  @default(now())
  isRead         Boolean   @default(false) // For unread indicator feature

  // Relations
  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)

  // Relation to documents sent WITH this message
  attachedDocuments Document[] @relation("MessageDocuments")

  @@index([consultationId, createdAt])
  @@index([senderId])
}

model Document {
  id             String    @id @default(cuid())
  consultationId String
  uploaderId     String
  fileName       String
  storageUrl     String    @db.Text // URL from Vercel Blob
  mimeType       String
  fileSize       Int?
  createdAt      DateTime  @default(now())
  // Optional link back to the specific message it was attached to
  messageId      String?

  // Relations
  consultation Consultation @relation("ConsultationDocuments", fields: [consultationId], references: [id], onDelete: Cascade)
  uploader     User         @relation("UploaderDocuments", fields: [uploaderId], references: [id], onDelete: Cascade)
  message      Message?     @relation("MessageDocuments", fields: [messageId], references: [id], onDelete: SetNull) // If message deleted, keep doc but unlink

  @@index([consultationId])
  @@index([uploaderId])
  @@index([messageId]) // Index for message link
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique // Store a hash of the token
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DeletionFeedback {
  id        String   @id @default(cuid())
  userId    String?  // User ID *before* deletion, good for tracking
  userEmail String   // Store email as user record will be gone
  feedback  String?  @db.Text // The optional feedback text
  deletedAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user deleted

  @@index([userEmail])
  @@index([deletedAt])
  @@index([userId])
}